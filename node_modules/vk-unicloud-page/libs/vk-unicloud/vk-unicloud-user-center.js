/**
 * unicloud-user-center 接口类（uni-id封装）
 * author	VK
 */
import callFunctionUtil from './vk-unicloud-callFunctionUtil.js'
var {callFunction, config} = callFunctionUtil;

export default {
	/**
	 * 用户注册(用户名+密码)
	 * data 请求参数 说明
	 * @params {String} username 用户名
	 * @params {String} password 密码
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 * @params {String} token 注册完成自动登录之后返回的token信息
	 * @params {String} tokenExpired token过期时间
	 */
	register(obj = {}){
		var that = this;
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/register',
			title:'请求中...',
			data:data,
			success(res) {
				uni.setStorageSync(config.uniIdTokenKeyName, res.token);
				uni.setStorageSync(config.uniIdTokenExpiredKeyName, res.tokenExpired);
				if(typeof obj.success == "function") obj.success(res);
			},
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 用户登陆(用户名+密码)
	 * data 请求参数 说明
	 * @params {String} username 用户名
	 * @params {String} password 密码
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 * @params {String} token 注册完成自动登录之后返回的token信息
	 * @params {String} tokenExpired token过期时间
	 */
	login(obj = {}) {
		var that = this;
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/login',
			title:'请求中...',
			data:data,
			success(res) {
				uni.setStorageSync(config.uniIdTokenKeyName, res.token);
				uni.setStorageSync(config.uniIdTokenExpiredKeyName, res.tokenExpired);
				if(typeof obj.success == "function") obj.success(res);
			},
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 登出(退出)
	 */
	logout(obj = {}) {
		var that = this;
		callFunction({
			url: 'user/pub/logout',
			title:'请求中...',
			success(res) {
				uni.removeStorageSync(config.uniIdTokenKeyName);
				uni.removeStorageSync(config.uniIdTokenExpiredKeyName);
				if(typeof obj.success == "function") obj.success(res);
			},
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 修改密码
	 * @description 修改成功后，需要重新登录获取新的token
	 * data 请求参数 说明
	 * @params {String} oldPassword 旧密码
	 * @params {String} newPassword 新密码
	 * @params {String} password_confirmation 确认新密码
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 */
	updatePwd(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/updatePwd',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 重置密码
	 */
	resetPwd(obj) {
		callFunction({
			url: 'user/kh/resetPwd',
			title:'请求中...',
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 设置头像
	 * data 请求参数 说明
	 * @params {String} avatar 头像地址
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 */
	setAvatar(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/setAvatar',
			title:'请求中...',
			data:data,
			//isRequest:true,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 设置昵称
	 * data 请求参数 说明
	 * @params {String} nickname 昵称
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 */
	updateUser(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/updateUser',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * token校验
	 */
	checkToken(obj = {}){
		callFunction({
			url: 'user/pub/checkToken',
			title:'请求中...',
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 绑定手机号
	 * data 请求参数 说明
	 * @params {String} mobile 手机号
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 */
	bindMobile(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/bindMobile',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 解绑手机号
	 */
	unbindMobile(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/unbindMobile',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 手机号登陆(手机号+手机验证码)
	 * data 请求参数 说明
	 * @params {String} mobile 手机号
	 * @params {String} code 验证码
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 * @params {String} token 注册完成自动登录之后返回的token信息
	 * @params {String} tokenExpired token过期时间
	 */
	loginBySms(obj = {}) {
		var that = this;
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/loginBySms',
			title:'请求中...',
			data:data,
			success(res) {
				uni.setStorageSync(config.uniIdTokenKeyName, res.token);
				uni.setStorageSync(config.uniIdTokenExpiredKeyName, res.tokenExpired);
				if(typeof obj.success == "function") obj.success(res);
			},
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 发送手机号验证码
	 */
	sendSmsCode(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/sendSmsCode',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 绑定邮箱
	 * data 请求参数 说明
	 * @params {String} email 邮箱
	 * @params {String} code  邮箱收到的验证码
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 */
	bindEmail(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/bindEmail',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 解绑邮箱
	 */
	unbindEmail(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/kh/unbindEmail',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 邮箱登陆(邮箱+邮箱验证码)
	 * data 请求参数 说明
	 * @params {String} email 邮箱
	 * @params {String} code  邮箱收到的验证码
	 * res 返回参数说明
	 * @params {Number} code 错误码，0表示成功
	 * @params {String} msg 详细信息
	 * @params {String} token 注册完成自动登录之后返回的token信息
	 * @params {String} tokenExpired token过期时间
	 */
	loginByEmail(obj = {}) {
		var that = this;
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/loginByEmail',
			title:'请求中...',
			data:data,
			success(res) {
				uni.setStorageSync(config.uniIdTokenKeyName, res.token);
				uni.setStorageSync(config.uniIdTokenExpiredKeyName, res.tokenExpired);
				if(typeof obj.success == "function") obj.success(res);
			},
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 发送邮件验证码
	 */
	sendEmailCode(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/sendEmailCode',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 设置验证码
	 */
	setVerifyCode(obj = {}) {
		var { data={} } = obj;
		callFunction({
			url: 'user/pub/setVerifyCode',
			title:'请求中...',
			data:data,
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 微信登陆获取用户code
	 */
	getWeixinCode() {
		return new Promise((resolve, reject) => {
			// #ifdef MP-WEIXIN
			uni.login({
				provider: 'weixin',
				success(res) {
					resolve(res.code)
				},
				fail(err) {
					reject(new Error('微信登录失败'))
				}
			})
			// #endif
			// #ifdef APP-PLUS
			plus.oauth.getServices((services) => {
				var weixinAuthService = services.find((service) => {
					return service.id === 'weixin';
				});
				if (weixinAuthService) {
					weixinAuthService.authorize(function(res) {
						resolve(res.code);
					}, function(err) {
						console.log(err);
						reject(new Error('微信登录失败'));
					});
				}
			});
			// #endif
		})
	},
	// 微信登陆
	loginByWeixin(obj = {}) {
		var that = this;
		that.getWeixinCode().then((code) => {
			callFunction({
				url: 'user/pub/loginByWeixin',
				title:'登录中...',
				data:{
					code:code
				},
				success:function(res){
					uni.setStorageSync(config.uniIdTokenKeyName, res.token);
					uni.setStorageSync(config.uniIdTokenExpiredKeyName, res.tokenExpired);
					if(typeof obj.success == "function") obj.success(res);
				},
				fail:obj.fail,
				complete:obj.complete
			});
		});
	},
	/**
	 * 绑定微信
	 */
	bindWeixin(obj = {}) {
		var that = this;
		that.getWeixinCode().then((code) => {
			callFunction({
				url: 'user/kh/bindWeixin',
				title:'请求中...',
				data:{
					code:code
				},
				success:function(res){
					if(typeof obj.success == "function") obj.success(res);
				},
				fail:obj.fail,
				complete:obj.complete
			});
		});
	},
	/**
	 * 解绑微信
	 */
	unbindWeixin(obj = {}) {
		callFunction({
			url: 'user/kh/unbindWeixin',
			title:'请求中...',
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 获取支付宝code
	 */
	getAlipayCode(){
		return new Promise((resolve, reject) => {
			uni.login({
				provider: 'alipay',
				success(res) {
					resolve(res.code);
				},
				fail(err) {
					reject(new Error('支付宝登录失败'));
				}
			})
		})
	},
	/**
	 * 支付宝登陆
	 */
	loginByAlipay(obj = {}) {
		var that = this;
		that.getAlipayCode().then((code) => {
			callFunction({
				url: 'user/pub/loginByAlipay',
				title:'登录中...',
				data:{
					code:code
				},
				success:function(res){
					uni.setStorageSync(config.uniIdTokenKeyName, res.token);
					uni.setStorageSync(config.uniIdTokenExpiredKeyName, res.tokenExpired);
					if(typeof obj.success == "function") obj.success(res);
				},
				fail:obj.fail,
				complete:obj.complete
			});
		});
	},
	/**
	 * 绑定支付宝
	 */
	bindAlipay(obj = {}) {
		var that = this;
		that.getAlipayCode().then((code) => {
			callFunction({
				url: 'user/kh/bindAlipay',
				title:'请求中...',
				data:{
					code:code
				},
				success:function(res){
					if(typeof obj.success == "function") obj.success(res);
				},
				fail:obj.fail,
				complete:obj.complete
			});
		});
	},
	/**
	 * 解绑支付宝
	 */
	unbindAlipay(obj = {}) {
		callFunction({
			url: 'user/kh/unbindAlipay',
			title:'请求中...',
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	},
	/**
	 * 密码加密测试(暂不用)
	 */
	encryptPwd(obj = {}) {
		callFunction({
			url: 'encryptPwd',
			title:'请求中...',
			success:obj.success,
			fail:obj.fail,
			complete:obj.complete
		});
	}
	
};