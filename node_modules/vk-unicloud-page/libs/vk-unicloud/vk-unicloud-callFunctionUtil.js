import deepMerge from "../function/deepMerge";
import modal from "../function/modal";

class CallFunctionUtil {
	constructor() {
		this.config = {
			// 是否开启测试环境的云函数，true：使用测试环境，false：使用正式环境，默认true
			isTest:false,
			// 设为false可关闭打印日志
			debug:true,
			// 云函数路由（主函数名）
			functionName:"router",
			// 云函数路由（开发测试函数名）
			testFunctionName:"router-test",
			// 云函数路由（主函数url化地址）
			functionPath:"https://xxxxxxx.bspapp.com/http/router",
			// 云函数路由（开发测试函数url化地址）
			testFunctionPath:"https://xxxxxxx.bspapp.com/http/router-test",
			// token缓存键值（请勿修改）
			uniIdTokenKeyName:"uniIdToken",
			// token缓存过期时间（请勿修改）
			uniIdTokenExpiredKeyName:"uni_id_token_expired",	
		}
		// 拦截器
		this.interceptor = {
			// 拦截1301、1302错误码（非法token和token失效）
			login: (obj = {}) =>{
				let {params, res} = obj;
				if(!params.noAlert){
					modal.alert(res.result.msg);
				}
				if(this.config.debug) console.log("跳登录页面");
			},
		}
		/**
		 * 云函数请求封装 - 统一入口
		 * @description 通过云函数路由，1个云函数实现多个云函数的效果。
		 * @params {String} 	url   		请求路径
		 * @params {Object} 	data  		请求参数
		 * @params {String} 	title 		遮罩层提示语，为空或不传则代表不显示遮罩层。
		 * @params {Boolean} 	isRequest 是否使用云函数url化地址访问云函数，默认false
		 * @params {Boolean} 	noAlert   为true代表请求错误时，不会有弹窗提示。默认为false
		 * @params {Function} success  	请求成功时，执行的回调函数
		 * @params {Function} fail  	 	请求失败时，执行的回调函数
		 * @params {Function} complete 	无论请求成功与否，都会执行的回调函数
		 */
		this.callFunction = (obj = {}) => {
			var config = this.config;
			if(obj.isRequest){
				this.runRequest(obj);
			}else{
				this.runCallFunction(obj);
			}
		}
		// 设置全局默认配置
		this.setConfig = (customConfig = {}) => {
			// 深度合并对象，否则会造成对象深层属性丢失
			this.config = deepMerge(this.config, customConfig);
		}
		/**
		 * 云函数上传图片
		 * @params {String} 	filePath   	要上传的文件对象
		 * @params {String} 	cloudPath  	文件的绝对路径，包含文件名(若不传，会自动生成文件名)
		 * @params {String} 	fileType 		文件类型，可选image、video、audio 默认image
		 * @params {Function} onUploadProgress 	上传进度回调
		 * @params {Function} success  					请求成功时，执行的回调函数
		 * @params {Function} fail  	 					请求失败时，执行的回调函数
		 * @params {Function} complete 					无论请求成功与否，都会执行的回调函数
		 */
		this.uploadFile = (obj = {}) => {
			// 生成文件名
			if(!obj.cloudPath) obj.cloudPath = this.createFileName(obj);
			var fileType = obj.fileType || "image";
			uniCloud.uploadFile({
			  filePath: obj.filePath,
			  cloudPath: obj.cloudPath,
				fileType: fileType,
				onUploadProgress: function(progressEvent) {
			    var percentCompleted = Math.round(
						(progressEvent.loaded * 100) / progressEvent.total
			    );
					if(typeof obj.onUploadProgress == "function"){
						obj.onUploadProgress({
							progressEvent,percentCompleted
						});
					}
			  },
			  success(res) {
					if(typeof obj.success == "function") obj.success(res);
				},
			  fail(err) {
					console.error(err);
					if(!obj.noAlert) modal.alert(JSON.stringify(err));
					if(typeof obj.fail == "function") obj.fail(err);
				},
			  complete() {
					if(typeof obj.complete == "function") obj.complete();
				}
			});
		}
	}
	// 云函数普通请求
	runCallFunction(obj = {}) {
		var that = this;
		var {url, data, title, isRequest, noAlert} = obj;
		var config = that.config;
		if(title) modal.showLoading(title);
		if(config.debug) console.log("【云函数请求】【" + config.functionName + "】请求参数: ", data);
		uniCloud.callFunction({
			name: config.isTest ? config.testFunctionName : config.functionName,
			data: {
				$url: url,
				data: data
			},
			success(res) {
				let code = res.result.code;
				if(config.debug) console.log("【云函数请求】【"+config.functionName+"】返回: ",res.result);
				if(code == 0 || res.result.key == 1 || (code == undefined && res.result.uid)){
					if(typeof obj.success == "function") obj.success(res.result);
				}else if([1301,1302,30201,30202,30203,30204].indexOf(code) > -1 
					&& res.result.msg.indexOf("token") > -1){
					// 跳转到页面页面
					if(typeof that.interceptor.login == "function"){
						that.interceptor.login({
							params:obj,
							res:res
						});
					} 
				}else{
					if(!noAlert) modal.alert(res.result.msg);
					if(typeof obj.fail == "function") obj.fail(res.result);
				}
			},
			fail(err) {
				console.error(err);
				if(!noAlert) modal.alert(JSON.stringify(err));
				if(typeof obj.fail == "function") obj.fail(err);
			},
			complete(){
				if(title) modal.hideLoading();
				if(typeof obj.complete == "function") obj.complete();
			}
		});
	}
	// 云函数url化请求
	runRequest(obj = {}) {
		var that = this;
		var {url, data, title, noAlert} = obj;
		var config = that.config;
		if(config.debug) console.log("【云函数url请求】【" + config.functionName + "】请求参数: ", data);
		var uniIdToken = uni.getStorageSync(config.uniIdTokenKeyName);
		var tokenExpired = uni.getStorageSync(config.uniIdTokenExpiredKeyName);
		if(uniIdToken && tokenExpired < new Date().getTime() && url.indexOf("/kh/") > -1){
			// 跳转到页面页面
			if(typeof that.interceptor.login == "function"){
				that.interceptor.login({
					"params":obj,
					"res":{
						"result":{
							"code": 1301,
							"msg": "token已过期，请重新登录"
						}
					}
				});
			}
			return false;
		}
		if(title) modal.showLoading(title);
		uni.request({
			method: "POST",
			url: config.isTest ? config.testFunctionPath : config.functionPath,
			data: {
				$url: url,
				data: data,
				uniIdToken:uniIdToken
			},
			success(res) {
				res.result = res.data;
				let code = res.result.code;
				if(config.debug) console.log("【云函数url请求】【"+config.functionName+"】返回: ",res.result);
				if(code == 0 || res.result.key == 1 || (code == undefined && res.result.uid)){
					if(typeof obj.success == "function") obj.success(res.result);
				}else if(code == 1301 || code == 1302){
					// 跳转到页面页面
					if(typeof config.login == "function"){
						config.login({
							params:obj,
							res:res
						});
					} 
				}else{
					if(!noAlert) modal.alert(res.result.msg);
					if(typeof obj.fail == "function") obj.fail(res.result);
				}
			},
			fail(err) {
				console.error(err);
				if(!noAlert) modal.alert(JSON.stringify(err));
				if(typeof obj.fail == "function") obj.fail(err);
			},
			complete(){
				if(title) modal.hideLoading();
				if(typeof obj.complete == "function") obj.complete();
			}
		});
	}
	// 随机数
	random_string(len = 32) {
		var chars = 'abcdefhijkmnprstwxyz0123456789';   
		var maxPos = chars.length;
		var pwd = "";
		for (let i = 0; i < len; i++) {
			pwd += chars.charAt(Math.floor(Math.random() * maxPos));
		}
		return pwd;
	}
	// 生成文件名
	createFileName(obj = {}) {
		var index = obj.index || 0;
		var oldName = index + ".png";
		var date = new Date();
		var year = date.getFullYear();
		var month = date.getMonth() + 1;
		if(month < 10) month = "0" + month;
		var day = date.getDate();
		if(day < 10) day = "0" + day;
		var dateYMD = year + "/" + month + "/" + day;		// YYYY/MM/DD
		var dateTime = date.getTime();									// 时间戳
		var suijishu = this.random_string(32);					// 32位随机数
		// 文件路径
		var filePath = dateYMD+"/";
		// 文件名  = 时间戳  - 随机数32位  + 后缀名
		var fileNickName = dateTime+"-"+suijishu+"-"+oldName;
		// 文件名全称(包含文件路径) = 外网域名  + 文件路径  + 文件名
		var fileFullName = filePath + fileNickName;
		return fileFullName;
	}
}
export default new CallFunctionUtil
